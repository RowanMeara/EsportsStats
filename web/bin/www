#!/usr/bin/env node

/**
 * Development Launch Script
 */

const debug = require('debug')('web:server')
const http = require('http')
const cron = require('node-cron')

const app = require('../app')
const queries = require('../server/queries')
const api = require('../routes/api')

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

// Update api cache so queries are responsive
let env = process.env.NODE_ENV || 'development'
cron.schedule('* 5 * * * *', queries.cache.refreshESG(), false)
cron.schedule('* 35 * * * *', queries.cache.refreshESG(), false)
if (env === 'production') {
  cron.schedule('* 5 * * * *', api.refreshCache(), false)
  cron.schedule('* 35 * * * *', api.refreshCache(), false)
  api.refreshCache()
}
queries.cache.refreshESG()

/**
 * Create HTTP server.
 */

let server = http.createServer(app)

/**
 * Listen on provided port only to local interfaces.  It is not recommended
 * to expose node.js applications to internet.
 */

server.listen(port, 'localhost')
server.on('error', onError)
server.on('listening', onListening)
console.log('Server Listening')

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  let port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening () {
  let addr = server.address()
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}
